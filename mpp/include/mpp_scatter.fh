!***********************************************************************
!*                   GNU Lesser General Public License
!*
!* This file is part of the GFDL Flexible Modeling System (FMS).
!*
!* FMS is free software: you can redistribute it and/or modify it under
!* the terms of the GNU Lesser General Public License as published by
!* the Free Software Foundation, either version 3 of the License, or (at
!* your option) any later version.
!*
!* FMS is distributed in the hope that it will be useful, but WITHOUT
!* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
!* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
!* for more details.
!*
!* You should have received a copy of the GNU Lesser General Public
!* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
!***********************************************************************

!> addtogroup mpp_mod
!> @{

!> @brief Scatter data from one pe to the specified pes.
!!
!> Scatter (ie - is) * (je - js) contiguous elements of array data from the designated root pe
!! into contigous members of array segment in each pe that is included in the pelist argument.
subroutine MPP_SCATTER_PELIST_2D_(is, ie, js, je, pelist, array_seg, data, is_root_pe, &
                                  ishift, jshift)
   integer,                           intent(in)    :: is, ie, js, je !< indices of segment array
   integer,   dimension(:),           intent(in)    :: pelist !<PE list of target pes,
                                                              !! must be in monotonic increasing order
   MPP_TYPE_, dimension(is:ie,js:je), intent(inout)    :: array_seg !< 2D array of output data
   MPP_TYPE_, dimension(:,:),         intent(in) :: data !< 2D array of input data
   logical,                           intent(in)    :: is_root_pe !< true if calling from root
   integer,   optional,               intent(in)    :: ishift, jshift !< Offsets of array elements

   MPP_TYPE_ ::  arr3D(size(array_seg,1),size(array_seg,2),1)
   MPP_TYPE_ :: data3D(size(     data,1),size(     data,2),1)
   pointer( aptr,  arr3D )
   pointer( dptr, data3D )
   aptr = LOC(array_seg)
   dptr = LOC(     data)

   call mpp_scatter(is, ie, js, je, 1, pelist, arr3D, data3D, is_root_pe, &
                    ishift, jshift)
   return

end subroutine MPP_SCATTER_PELIST_2D_


subroutine MPP_SCATTER_PELIST_3D_(is, ie, js, je, nk, pelist, array_seg, data, is_root_pe, &
  ishift, jshift)
  integer,                                intent(in)    :: is, ie, js, je, nk
  integer,   dimension(:),                intent(in)    :: pelist
  MPP_TYPE_, dimension(is:ie,js:je,1:nk), intent(inout)    :: array_seg
  MPP_TYPE_, dimension(:,:,:),            intent(in) :: data
  logical,                                intent(in)    :: is_root_pe
  integer,   optional,                    intent(in)    :: ishift, jshift

  integer :: i, msgsize, root_pe, root_pe_test
  integer :: i1, j1 !< Starting indices of i and j
  integer :: i2, j2 !< Ending indices of i and j
  integer :: ioff, joff !< Offsets to i and j
  integer :: my_ind(4) !< My starting and ending indices of i and j
  integer :: gind(4,size(pelist)) !< Starting and ending indices of all processes in the group
  integer :: n !< Peset number
  integer :: ierr !< MPI error state
  MPP_TYPE_, allocatable :: send_buf(:) !< Packed data to be scattered; only relevant to the root pe
  MPP_TYPE_, allocatable :: recv_buf(:) !< My chunk of data
  integer :: send_count(size(pelist)) !< Stores message sizes for all processes in the group
  integer :: displ(size(pelist)) !< Displacements for data segments
  integer :: total_msgsize

  if (.not.ANY(mpp_pe().eq.pelist(:))) return

  ! Get peset number
  n = get_peset(pelist); if( peset(n)%count.EQ.1 )return

  if (is_root_pe) then
    root_pe = mpp_pe()
    root_pe_test = 999
    if (.not.ANY(pelist(:).eq.root_pe)) call mpp_error(FATAL, &
      "fms_io(mpp_scatter_pelist): root_pe not a member of pelist")
    if (root_pe /= pelist(1)) then
      call mpp_error(FATAL, "fms_io(mpp_scatter_pelist): root_pe is not the first pe of pelist")
    end if
  else
    root_pe = 0
    root_pe_test = -999
  endif
  ! need this check in case MPI-rank 0 is a member of the pelist
  call mpp_max(root_pe_test, pelist)
  if (root_pe_test.lt.0) call mpp_error(FATAL, &
    "fms_io(mpp_scatter_pelist): root_pe not specified or not a member of the pelist")
    ! need to make sure only one root_pe has been specified
  call mpp_sum(root_pe, pelist)
  if ((is_root_pe) .and. (mpp_pe().ne.root_pe)) call mpp_error(FATAL, &
    "fms_io(mpp_scatter_pelist): too many root_pes specified")

  send_count = 0
  total_msgsize = 0
  ioff=0
  joff=0
  if (present(ishift)) ioff=ishift
  if (present(jshift)) joff=jshift

  my_ind(1) = is
  my_ind(2) = ie
  my_ind(3) = js
  my_ind(4) = je

  ! Gather indices from all processes in the group at the root pe
  call MPI_GATHER(my_ind, 4, MPI_TYPE_, gind, 4, MPI_TYPE_, root_pe, peset(n)%id, ierr)
  if (ierr /= MPI_SUCCESS) call mpp_error(FATAL, "mpp_scatter_pelist:MPI_GATHER")

  ! Compute my message size
  msgsize = (my_ind(2)-my_ind(1)+1) * (my_ind(4)-my_ind(3)+1) * nk
  allocate(recv_buf(msgsize))

  ! Update group indices
  if (is_root_pe) then
    gind(1,:)=gind(1,:)+ioff
    gind(2,:)=gind(2,:)+ioff
    gind(3,:)=gind(3,:)+joff
    gind(4,:)=gind(4,:)+joff
    ! check indices to make sure they are within the range of "data"
    if ((minval(gind).lt.1) .OR. (maxval(gind(1:2,:)).gt.size(data,1)) .OR. (maxval(gind(3:4,:)).gt.size(data,2))) &
      call mpp_error(FATAL,"fms_io(mpp_scatter_pelist): specified indices (with shift) are outside &
        of the range of the receiving array")
  end if

  if (is_root_pe) then
    do i = 1, size(pelist)
      i1 = gind(1,i)
      i2 = gind(2,i)
      j1 = gind(3,i)
      j2 = gind(4,i)
      ! Pack message sizes
      send_count(i) = (i2-i1+1)*(j2-j1+1)*nk
      total_msgsize = total_msgsize + send_count(i)
      ! Compute data displacements
      displ(i) = total_msgsize - send_count(i)
      ! Pack data segments
      if (i == 1) then
        send_buf = reshape(data(i1:i2,j1:j2,1:nk), (/size(data(i1:i2,j1:j2,1:nk))/))
      else
        send_buf = reshape(send_buf, (/size(send_buf)+size(data(i1:i2,j1:j2,1:nk))/), data(i1:i2,j1:j2,1:nk))
      end if
    enddo
  end if

  ! Scatter data segments to respective processes
  call MPI_SCATTERV(send_buf, send_count, displ, MPI_TYPE_, recv_buf, &
        msgsize, MPI_TYPE_, root_pe, peset(n)%id, ierr)
  if (ierr /= MPI_SUCCESS) call mpp_error(FATAL, "mpp_scatter_pelist:MPI_SCATTERV")

  call mpp_sync_self()

  ! Unpack received data
  array_seg(is:ie,js:je,1:nk) = reshape(recv_buf, (/shape(array_seg(is:ie,js:je,1:nk))/))

  return

end subroutine MPP_SCATTER_PELIST_3D_
!> @}
